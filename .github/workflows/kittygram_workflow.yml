name: Main workflow

on:
  push:
    branches:
      - main

jobs:
  # тест проекта
  tests:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
    # Копируем код проекта:
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action:
    - name: Set up Python
      uses: actions/setup-python@v4
    # Обновляем pip, устанавливаем flake8 и flake8-isort,
    # устанавливаем зависимости проекта:
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
    # Запускаем flake8:
    - name: Test with flake8
      # Вызываем flake8 и указываем ему,
      # что нужно проверить файлы только в папке backend/
      run: python -m flake8 backend/
  
  # Сборка образа и загрузка в Docker Hub
  build-push:
    needs: tests
    # Разворачиваем окружение:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория:
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker:
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        # Авторизация на Docker Hub:
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push backend to DockerHub
        # Одновременный билд и пуш образа в Docker Hub:
        uses: docker/build-push-action@v4
        with:
          # Dockerfile находится в ./backend/
          context: ./backend/
          # образ нужно собрать и отправить на Docker Hub:
          push: true
          # указываем название и tag образа
          tags: ${{ secrets.DOCKER_LOGIN }}/kittygram_backend:latest

      - name: Push frontend to DockerHub
        # Одновременный билд и пуш образа в Docker Hub:
        uses: docker/build-push-action@v4
        with:
          # Dockerfile находится в ./frontend/
          context: ./frontend/
          # образ нужно собрать и отправить на Docker Hub:
          push: true
          # указываем название и tag образа
          tags: ${{ secrets.DOCKER_LOGIN }}/kittygram_frontend:latest

      - name: Push gateway to DockerHub
        # Одновременный билд и пуш образа в Docker Hub:
        uses: docker/build-push-action@v4
        with:
          # Dockerfile находится в ./nginx/
          context: ./nginx/
          # образ нужно собрать и отправить на Docker Hub:
          push: true
          # указываем название и tag образа
          tags: ${{ secrets.DOCKER_LOGIN }}/kittygram_gateway:latest

  # Развёртывание на сервере
  deploy:
    needs: build-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        # Получение исходного кода из репозитория:
        uses: actions/checkout@v3
      - name: Copy docker-compose
        uses: appleboy/scp-action@master
          # Передаём параметры для action appleboy/scp-action:
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_LOGIN }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SERVER_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "./kittygram"
        # Создаём .env файл
      - name: Export env
        run: |
          echo "TEST=${{ secrets.TEST }}" >> .env
      - name: Deploy application
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_LOGIN }}
          passphrase: ${{ secrets.SERVER_PASSPHRASE }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            sudo docker -v
            echo "Переходим в папку проекта"
            cd ./kittygram

            echo "Запускакм файл docker-compose"
            sudo docker compose -f docker-compose.production.yml pull

            echo "Перезапускаем контенеры"
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            
            echo "Выполняет миграции и сбор статики"
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/
            sudo docker image prune -f
  
  # Тестирование на сервере
  server_tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
            python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./backend/requirements.txt --prefer-binary
      - name: Run autotests
        run: |
          pytest

  # Оповещение об успешном окончании ci/cd
  telegram_notify:
      runs-on: ubuntu-latest
      needs: server_tests
      steps:
        - name: Send message
          uses: appleboy/telegram-action@master
          with:
            to: ${{ secrets.TELEGRAM_TO }}
            token: ${{ secrets.TELEGRAM_TOKEN }}
            message: |
              [by_Artisan] - ${{ github.actor }} запушил изменения для ${{ github.repository }}.
              Айда смотреть изменения 
              
              https://github.com/${{ github.repository }}/commit/${{github.sha}}
              
              Cообщение в коммите:
              ${{ github.event.commits[0].message }}
            sticker: CAACAgIAAxkBAAENeERngC-DukdGxbt5IGz1u5uZMSsUxQACAUUAAgPL8EiSZgZCWgbx6zYE